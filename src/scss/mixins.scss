@use "maps";

$bps: maps.$breakpoints;

// To quickly centre a block element without having to worry about if there is any top or bottom margin already applied.

@mixin push--auto {
    margin: {
        left: auto;
        right: auto;
    }
}

@mixin vertical-center {
    // center a block vertically
    position: relative;
    top: 50%;
    -ms-transform: translateY(-50%);
    -webkit-transform: translateY(-50%);
    transform: translateY(-50%);
}

@mixin aspect-ratio($width, $height) {
    // html pattern for this mixin
    //     <div class="image">
    //     <div class="img-wrapper">
    //       <img src="https://loremflickr.com/1800/675/people">
    //     </div>
    //   </div>
    max-height: #{$height}rem;
    overflow: hidden;
    div[class*="img-wrapper"] {
        padding-top: percentage(calc($height / $width));
        position: relative;
        img {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            object-position: center;
            max-height: #{$height}rem;
            // max-width: #{$width}rem;
        }
    }
}
.image {
    @include aspect-ratio(100, 100);
}

@mixin bg-image($height, $bg-path) {
    position: relative;
    min-width: 100vw;
    height: ($height) + rem;
    background-size: cover;
    background-position: 50% 50%;

    background-image: url($bg-path);
}

// A massive time saver! You can just use pixel values but we have some default breakpoints setup that work too, another time saver while keeping your breakpoints consistent.

// $bps: (
//     "phone": 400px,
//     "phone-wide": 480px,
//     "phablet": 560px,
//     "tablet-small": 640px,
//     "tablet": 768px,
//     "tablet-wide": 1024px,
//     "desktop": 1248px,
//     "desktop-wide": 1440px,
// );

@mixin spinner($color, $size, $thickness) {
    // html structure
    // <div class="spinner">
    //     <div class="loader"></div>
    // </div>
    margin: 0;
    display: grid;
    place-content: center;
    .loader {
        width: $size + rem; /* the size */
        padding: $thickness + rem; /* the border thickness */
        background: $color; /* the color */

        aspect-ratio: 1;
        border-radius: 50%;
        --_m: conic-gradient(#0000, #000), linear-gradient(#000 0 0) content-box;
        -webkit-mask: var(--_m);
        mask: var(--_m);
        -webkit-mask-composite: source-out;
        mask-composite: subtract;
        box-sizing: border-box;
        animation: load 1s linear infinite;
    }
    @keyframes load {
        to {
            transform: rotate(1turn);
        }
    }
}

@mixin mq($width, $type: min) {
    @if map_has_key($bps, $width) {
        $width: calc(map_get($bps, $width));
        @if $type == max {
            $width: $width - 1px;
        }
        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    } @else {
        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    }
}

@mixin truncate($truncation-boundary) {
    max-width: $truncation-boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin center-absolute() {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
}

@mixin create-responsive-image($width: 10, $height: 10) {
    // $curwidth - original mobile width

    // 1st breakpoint divided by initial mobile-first size

    width: $curwidth + rem;
    height: 100%;
    object-fit: scale-down;
    object-position: 0 0;

    @include mq(phone) {
        //400px
        min-width: calc($curwidth) + rem;
    }
    @include mq(phone-wide) {
        //480px
        $width: calc(map-get($bps, phone));
        min-width: calc($width / 10) + rem;
    }
    @include mq(phablet) {
        //560px
        $width: calc(map_get($bps, phone-wide));
        min-width: calc($width / 10) + rem;
    }
    @include mq(tablet-small) {
        //640px
        $width: calc(map_get($bps, phablet));
        min-width: calc($width / 10) + rem;
    }
    @include mq(tablet) {
        //768px
        $width: calc(map_get($bps, tablet));
        min-width: calc($width / 10) + rem;
    }
    /*
    @include mq(tablet-wide) {
        //1024px
        min-width: $tabletRem + rem;
    }

    @include mq(desktop) {
        //1248px
        min-width: $tablet-wideRem + rem;
    }
    @include mq(desktop-wide) {
        //1440px
        min-width: $desktopRem + rem;
    }
    
    */
}

@mixin switch-layout(
    // starting width - rem
    $starting-width: 10,
    // starting height - rem
    $starting-height: 10,
    $layout: mobile
) {
    $aspect-ratio: calc($starting-height / $starting-width);

    // -------------------------
    // mobile layout
    // -------------------------
    @if ($layout == mobile) {
        $index: calc($starting-width / $phoneRem);

        @media (width <= 400px) {
            //400px
            $curwidth: calc($phoneRem * $index);
            width: $curwidth + rem;
            height: calc($curwidth * $aspect-ratio) + rem;
        }
        @include mq(phone) {
            //400px
            width: $starting-width + rem;
            height: calc($starting-width * $aspect-ratio) + rem;
        }
    } @else if ($layout == desktop) {
        // -------------------------
        // desktop layout
        // -------------------------
        $index: calc($starting-width / $desktopRem);
        @media (width >= 1248px) {
            //1440px
            $curwidth: calc($desktop-wideRem * $index);
            width: $curwidth + rem;
            height: $curwidth * $aspect-ratio + rem;
        }

        @include mq(desktop, max) {
            //1248px
            $curwidth: calc($desktopRem * $index);
            width: $curwidth + rem;
            height: calc($curwidth * $aspect-ratio) + rem;
        }
        @include mq(tablet-wide, max) {
            //1024px
            $curwidth: $starting-width;
            max-width: $curwidth + rem;
            max-height: $starting-height + rem;
        }
    }
}
